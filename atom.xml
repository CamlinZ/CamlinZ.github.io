<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Camlin Zhang&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://camlinzhang.com/"/>
  <updated>2019-02-12T09:16:02.534Z</updated>
  <id>http://camlinzhang.com/</id>
  
  <author>
    <name>Camlin Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://camlinzhang.com/2019/02/12/hello-world/"/>
    <id>http://camlinzhang.com/2019/02/12/hello-world/</id>
    <published>2019-02-12T09:16:02.534Z</published>
    <updated>2019-02-12T09:16:02.534Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>人脸检测和人脸对齐C++工程</title>
    <link href="http://camlinzhang.com/2018/08/21/face_detector/"/>
    <id>http://camlinzhang.com/2018/08/21/face_detector/</id>
    <published>2018-08-21T06:53:01.000Z</published>
    <updated>2019-03-24T15:28:08.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="人脸检测和人脸对齐C-工程"><a href="#人脸检测和人脸对齐C-工程" class="headerlink" title="人脸检测和人脸对齐C++工程"></a>人脸检测和人脸对齐C++工程</h1><h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>该工程分为人脸检测，人脸对齐和特征点平滑处理三个部分。</p><p><strong>人脸检测</strong></p><p>采用FaceBoxes作为解决方案，参考论文《FaceBoxes: A CPU Real-time Face Detector with High Accuracy》。并且在该论文提出的网络结构基础上，进行了网络压缩，使其达到更快的速度，详情见model文件夹中的README.md</p><p><strong>人脸对齐</strong></p><p>采用dlib库中的ERT作为解决方案，参考论文《One Millisecond Face Alignment with an Ensemble of Regression Trees》</p><p><strong>特征点平滑处理</strong></p><p>由于使用ERT进行视频帧的特征点检测时，特征点会出现明显的抖动，所以采用卡尔曼滤波进行平滑处理，参考论文《Automatic facial landmark tracking in video sequences using kalman filter assisted active shape models》</p><h2 id="2、流程说明"><a href="#2、流程说明" class="headerlink" title="2、流程说明"></a>2、流程说明</h2><p><strong>总体流程</strong></p><p><img src="/2018/08/21/face_detector/flow_diagram.jpg" alt="flow_diagram"></p><p><strong>调整人脸检测框流程</strong></p><p>在上述流程中，由于检测算法得到的人脸框普遍无法将所有的68个人脸特征点包含进来，因此引入调整人脸检测框位置这一步，具体步骤如下图所示：</p><p><img src="/2018/08/21/face_detector/adjust_flow_diagram.jpg" alt="adjust_flow_diagram"></p><p><strong>卡尔曼滤波处理流程</strong></p><p>卡尔曼滤波分别针对68个特征点中嘴部、眼睛、面部轮廓和其他区域4个部分进行滤波，这四个部分的原理相同，只是参数的设置不同。以其中一个为例，如下图所示：</p><p><img src="/2018/08/21/face_detector/kalman_filter_flow_diagram.jpg" alt="kalman_filter_flow_diagram"></p><h2 id="3、依赖环境"><a href="#3、依赖环境" class="headerlink" title="3、依赖环境"></a>3、依赖环境</h2><ul><li>FaceBoxes caffe环境</li><li>dlib 19.15</li><li>Opencv 3.1.0</li><li>CentOS Linux release 7.2</li></ul><h2 id="4、API"><a href="#4、API" class="headerlink" title="4、API"></a>4、API</h2><p><strong>类说明</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FacenetCaffe</span><br></pre></td></tr></table></figure><ul><li>该类用于封装人脸检测的功能函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FaceLandmarkDetector</span><br></pre></td></tr></table></figure><ul><li>该类用于封装人脸特征点检测的功能函数</li></ul><p><strong>函数说明</strong></p><p><strong>class FacenetCaffe</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int initModel(const string &amp; model_path, const string &amp; weights_path, const string &amp; mean_value)</span><br></pre></td></tr></table></figure><p>参数</p><ul><li>model_path —— 网络模型路径</li><li>weights_path —— 网络权重路径</li><li>mean_value —— 图像均值</li></ul><p>返回值</p><ul><li>int类型，用于返回错误码，可根据实际情况进行修改</li></ul><p>作用</p><ul><li>初始化人脸检测模型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;float&gt;&gt; detectFace(const cv::Mat &amp; img)</span><br></pre></td></tr></table></figure><p>参数</p><ul><li>img —— 待检测图片</li></ul><p>返回值</p><ul><li>检测到人脸的坐标值</li></ul><p>作用</p><ul><li>检测img中人脸坐标值</li></ul><p><strong>class FaceLandmarkDetector</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void init(const string model_path)</span><br></pre></td></tr></table></figure><p>参数</p><ul><li>model_path —— ERT模型路径</li></ul><p>返回值</p><ul><li>空</li></ul><p>作用</p><ul><li>初始化ERT模型和卡尔曼滤波参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int GetFaceBox(FacenetCaffe fc_box, cv::Mat image, std::vector&lt;std::vector&lt;int&gt;&gt; &amp; face_box, float confidence_threshold, double &amp; time_detec)</span><br></pre></td></tr></table></figure><p>参数</p><ul><li>fc_box —— FacenetCaffe类的对象</li><li>image —— 待检测人脸框的图像</li><li>face_box —— 检测出来的人脸框</li><li>confidence_threshold —— 置信度阈值</li><li>time_detec —— 检测时间</li></ul><p>返回值</p><ul><li>int类型，用于返回错误码，可根据实际情况进行修改</li></ul><p>作用</p><ul><li>利用类FacenetCaffe中的detectFace方法检测图片的人脸框位置，并计算检测时间</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int AdjustFaceBox(cv::Mat image, std::vector&lt;std::vector&lt;int&gt;&gt; &amp; face_box)</span><br></pre></td></tr></table></figure><p>参数</p><ul><li>image —— 待检测人脸框的图像</li><li>face_box —— 由GetFaceBox检测出来的人脸框</li></ul><p>返回值</p><ul><li>int类型，用于返回错误码，可根据实际情况进行修改</li></ul><p>作用</p><ul><li>根据上面第二部分的流程说明中”调整人脸检测框流程“的步骤对GetFaceBox检测出来的人脸框进行调整，使其可以包含所有的人脸特征点</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int ImageStandard(float &amp; rate_w, float &amp; rate_h, cv::Mat frame, std::vector&lt;std::vector&lt;int&gt;&gt; face_box, std::vector&lt;cv::Mat&gt; &amp; img_resize_vector)</span><br></pre></td></tr></table></figure><p>参数</p><ul><li>rate_w —— 缩放人脸框的x轴方向比例</li><li>rate_h —— 缩放人脸框的y轴方向比例</li><li>frame —— 待检测人脸框的图像</li><li>face_box —— 经过AdjustFaceBox调整过后的人脸检测框</li><li>img_resize_vector —— 存储根据上面人脸检测框crop出来的人脸图片</li></ul><p>返回值</p><ul><li>int类型，用于返回错误码，可根据实际情况进行修改</li></ul><p>作用</p><ul><li>为了达到更高的精度，ERT检测人脸特征点需要224x224的纯人脸图像，所以要根据上面得到的人脸框将人脸从原图中crop出来，并将其resize到224x224大小。而由于后面需要将这些点重新映射到原图上，所以需要rate_w和rate_h来保存缩放比例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int detectFaceLandmark(float &amp; rate_w, float &amp; rate_h, std::vector&lt;int&gt; face_box, cv::Mat image, std::vector&lt;std::vector&lt;int&gt;&gt; &amp; landmark, bool flag, double &amp; time)</span><br></pre></td></tr></table></figure><p>参数</p><ul><li>rate_w —— 缩放人脸框的x轴方向比例</li><li>rate_h —— 缩放人脸框的y轴方向比例</li><li>face_box —— 经过AdjustFaceBox调整过后的人脸检测框</li><li>image —— 根据人脸检测框crop出来的人脸图片</li><li>landmark —— 检测出来的特征点，是一个68x2的二维vector</li><li>flag —— 是否需要使用滤波处理</li><li>time —— 检测特征点所需时间</li></ul><p>返回值</p><ul><li>int类型，用于返回错误码，可根据实际情况进行修改</li></ul><p>作用</p><ul><li>检测根据人脸检测框crop出来的人脸图片中对应的人脸特征点，并将其坐标映射回原图中。如果flag为True，则将该预测出来的特征点进行滤波平滑处理。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void GetNewPoints(float rate_w, float rate_h, std::vector&lt;int&gt; face_box, std::vector&lt;std::vector&lt;int&gt;&gt; &amp; landmark_pre, std::vector&lt;std::vector&lt;int&gt;&gt; &amp; landmark_pre_ori)</span><br></pre></td></tr></table></figure><p>参数</p><ul><li>rate_w —— 缩放人脸框的x轴方向比例</li><li>rate_h —— 缩放人脸框的y轴方向比例</li><li>face_box —— 经过AdjustFaceBox调整过后的人脸检测框</li><li>landmark_pre —— 利用ERT检测crop之后的人脸所得到的特征点</li><li>landmark_pre_ori —— 将landmark_pre映射到原始输入图像中得到的特征点</li></ul><p>返回值</p><ul><li>空</li></ul><p>作用</p><ul><li>实现detectFaceLandmark函数中将ERT检测crop之后的人脸所得到的特征点映射到原始输入图像的功能</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;std::vector&lt;int&gt;&gt; KalmanFilter(cv::Mat landmark_pre, float height)</span><br></pre></td></tr></table></figure><p>参数</p><ul><li>landmark_pre —— 对于detectFaceLandmark中ERT方法得到的原始图像中的特征点坐标值，将其转换为cv::Mat形式，并将其进行转置为一个68x2的矩阵</li><li>height —— 检测出来的人脸框的高</li></ul><p>返回值</p><ul><li>landmark_pre经过卡尔曼滤波处理后得到的新的特征点坐标值</li></ul><p>作用</p><ul><li>根据上面第二部分的流程说明中”卡尔曼滤波处理流程“对ERT检测到的特征点进行平滑处理</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void drawLandmarks(cv::Mat &amp;image, std::vector&lt;std::vector&lt;int&gt;&gt; landmark, cv::Scalar color = cv::Scalar(255, 0, 0), int radius = 3)</span><br></pre></td></tr></table></figure><p>参数</p><ul><li>image —— 输入的原始待检测图片</li><li>landmark —— 特征点坐标值</li><li>color —— 在输入图片上画特征点的颜色</li><li>radius —— 在输入图片上画特征点的半径值</li></ul><p>返回值</p><ul><li>空</li></ul><p>作用</p><ul><li>将检测到的特征点画到输入图片上</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void TestVedioLandmark(FacenetCaffe fc_box, const string root)</span><br></pre></td></tr></table></figure><p>参数</p><ul><li>fc_box —— FacenetCaffe类的对象</li><li>root —— 存放示例视频及其对应标签的根目录</li></ul><p>返回值</p><ul><li>空</li></ul><p>作用</p><ul><li>检测示例视频中的人脸位置以及人脸特征点，主函数可以仿照这个函数来写</li></ul><h2 id="5、Quick-Start"><a href="#5、Quick-Start" class="headerlink" title="5、Quick Start"></a>5、Quick Start</h2><ul><li>拷贝整个工程文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone http://git.code.com/camlinzhang/face_detection_and_alignment.git</span><br></pre></td></tr></table></figure><ul><li>修改CMakeList.txt</li></ul><p>（1）编译动态库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">set(SOURCE_FILES src/face_landmark_detection.cpp include/face_landmark_detection.h src/facenet_caffe.cpp include/facenet_caffe.h include/caffe_register.h)</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">#add_executable(face_landmark $&#123;SOURCE_FILES&#125;)</span><br><span class="line"></span><br><span class="line">ADD_LIBRARY(face_landmark SHARED $&#123;SOURCE_FILES&#125;)</span><br><span class="line">SET(LIBRARY_OUTPUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;)</span><br><span class="line"></span><br><span class="line">target_link_libraries(face_landmark $&#123;olibs_point&#125; $&#123;bLIBS&#125; $&#123;oLIBS&#125; $&#123;hLIBS&#125; dlib caffe glog gflags protobuf openblas opencv_core opencv_imgproc opencv_highgui opencv_imgcodecs)</span><br></pre></td></tr></table></figure><p>（2）编译静态库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">set(SOURCE_FILES src/face_landmark_detection.cpp include/face_landmark_detection.h src/facenet_caffe.cpp include/facenet_caffe.h include/caffe_register.h)</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#add_executable(face_landmark $&#123;SOURCE_FILES&#125;)</span><br><span class="line"></span><br><span class="line">ADD_LIBRARY(face_landmark $&#123;SOURCE_FILES&#125;)</span><br><span class="line">SET(LIBRARY_OUTPUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;)</span><br><span class="line"></span><br><span class="line">target_link_libraries(face_landmark $&#123;olibs_point&#125; $&#123;bLIBS&#125; $&#123;oLIBS&#125; $&#123;hLIBS&#125; dlib caffe glog gflags protobuf openblas opencv_core opencv_imgproc opencv_highgui opencv_imgcodecs)</span><br></pre></td></tr></table></figure><p>（3）编译可执行文件，用于测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">set(SOURCE_FILES src/main.cpp src/face_landmark_detection.cpp include/face_landmark_detection.h src/facenet_caffe.cpp include/facenet_caffe.h include/caffe_register.h)</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">add_executable(face_landmark $&#123;SOURCE_FILES&#125;)</span><br><span class="line"></span><br><span class="line">#ADD_LIBRARY(face_landmark SHARED $&#123;SOURCE_FILES&#125;)</span><br><span class="line">#SET(LIBRARY_OUTPUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;)</span><br><span class="line"></span><br><span class="line">target_link_libraries(face_landmark $&#123;olibs_point&#125; $&#123;bLIBS&#125; $&#123;oLIBS&#125; $&#123;hLIBS&#125; dlib caffe glog gflags protobuf openblas opencv_core opencv_imgproc opencv_highgui opencv_imgcodecs)</span><br></pre></td></tr></table></figure><ul><li>进入工程文件并编译</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd face_detection_and_alignment</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake ..</span><br><span class="line">make -j8</span><br></pre></td></tr></table></figure><ul><li>最后</li></ul><p>（1）执行可执行文件进行测试(当修改CMakeList.txt用于编译可执行文件进行测试时)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./face_landmark</span><br></pre></td></tr></table></figure><p>（2）在工程的根目录下生成库文件(当修改CMakeList.txt用于生成库文件时)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;人脸检测和人脸对齐C-工程&quot;&gt;&lt;a href=&quot;#人脸检测和人脸对齐C-工程&quot; class=&quot;headerlink&quot; title=&quot;人脸检测和人脸对齐C++工程&quot;&gt;&lt;/a&gt;人脸检测和人脸对齐C++工程&lt;/h1&gt;&lt;h2 id=&quot;1、前言&quot;&gt;&lt;a href=&quot;#1、前
      
    
    </summary>
    
      <category term="技术博客" scheme="http://camlinzhang.com/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="深度学习" scheme="http://camlinzhang.com/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="人脸检测" scheme="http://camlinzhang.com/tags/%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B/"/>
    
      <category term="人脸对齐" scheme="http://camlinzhang.com/tags/%E4%BA%BA%E8%84%B8%E5%AF%B9%E9%BD%90/"/>
    
      <category term="深度学习" scheme="http://camlinzhang.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
